<!--
author: Melanie Baur
language: de
version: 0.0.2
narrator: Deutsch Female
mode: Textbook

comment: Vorlesung Programmieren 1 an der HFT Stuttgart, content adaptiert von Sebastian Speiser und weiteren Professoren und Hiwis der HFT Stuttgart

import: https://raw.githubusercontent.com/liascript/CodeRunner/master/README.md

-->
# Programmieren 1 in Java
<article>
Dieses Online-Buch wird entwickelt an der Hochschule für Technik Stuttgart und dient der Einführung in die Programmierung mit Java zunächst in den Studiengängen Informatik und Wirtschaftsinformatik im 1. Semester. Es werden somit keine Vorkenntnisse im Programmieren vorausgesetzt. Das Buch befindet sich gerade im Aufbau und wird laufend ergänzt und verbessert.

Als Arbeitsweise wird für die Teilnehmenden der oben genannten Vorlesungen vorgeschlagen, jede Woche ein Kapitel durchzuarbeiten inkl. der zur Verfügung stehenden Programmieraufgaben. Der geschätze Zeitaufwand beträgt ohne Vorkenntnisse pro Woche 16 Stunden. Hiervon werden 6 Stunden an der Hochschule erbracht, ein:e Professor:in und/oder ein:e Assistent:in stehen hierbei für Fragen zur Verfügung. 10 Stunden sollen selbständig absolviert werden.

Lesen Sie gerne ein "echtes" Buch? So empfehlen wir die Lektüre von Philipp Ackermann: Schrödinger programmiert Java, Rheinwerk. Sie finden dieses Buch als eBook in der HFT Bibliothek.

Die wichtigsten Informationen finden Sie aber in diesem Online-Buch. Dieses besteht nicht nur aus Text, sondern auch aus Links zu externen Webseiten. Für diese übernehmen wir keinerlei Haftung. Weiterhin gibt es natürlich viele Code-Beispiele. Diese können Sie direkt im Online-Buch ausführen. 

Zum Beispiel ist das folgende ein Programm-Code, bei dem etwas auf der Konsole ausgegeben wird.

```java
class HalloWelt{
    public static void main(String args[]){
        System.out.println("Hallo Welt");
    }
}
```
@LIA.java(HalloWelt)

Klicken Sie nun auf </> im kleinen Kreis unter der Code-Zeile, so wird der Code ausgeführt und Sie sehen im schwarzen Kästchen, das dann erscheint, das Ergebnis.

</article>

Natürlich sollen Sie nicht nur lesen, sondern insbesondere auch viel selbst machen. Hier kommt die erste Aufgabe.

**Aufgabe:**
Geben Sie nun statt "Hallo Welt" einen anderen Text zwischen den Anführungszeichen ein. Führen Sie den Code erneut aus. Was fällt Ihnen auf?

Auf der rechten Seiten unterhalb des Codes, können Sie nun mit den Pfeilen zwischen den verschiedenen Codes hin- und herwechseln. Gehen Sie mit dem Pfeil nach links zurück auf den ursprünglichen Code und dann mit dem Pfeil nach rechts wieder zu Ihrem neuen Code.


**Übungen:**
Um viel zu üben, denn das ist das wichtigste beim Programmieren, werden [hier](https://speiser.hft-pages.io/programmieraufgaben/2024-ss-pro-1/) zu jedem Kapitel Übungen bereit gestellt. Sie werden im Laufe des Buchs immer wieder zu diesen Übungen aufgefordert. Führen Sie die Aufgaben gewissenhaft aus. Bei Problemen fragen Sie einfach in der nächsten Mentoringstunde. 



## Einführung 
Eine Programmiersprache zu lernen, ist unabdingbare Voraussetzung für eine Tätigkeit in der Informatik, z.B. als Entwickler, Projektleiter, Softwarearchitekt. 

* Kennen Sie einen Trainer der Bundesliga, der nicht Profi-Fußballer war? 
* Haben Sie Schwimmen oder Radfahren aus Büchern erlernt? 
* Sind Sie zur praktischen Fahrprüfung erstmals Auto gefahren?
* Wie viele Jahre hat ein Musiker vor dem ersten Klavierkonzert geübt?

Sie lernen zunächst, was Code und was ein Programm ist. Am Ende des Kapitels werden Sie Ihr erstes eigenes Programm in der Programmiersprache schreiben und ausführen.

### Was ist Code?
* Code ist eine Reihe von Anweisungen,
* Jede Anweisung beschreibt, welche Operation (z.B. Addition) der Computer mit welchen Operanden (z.B. 5 und 3) ausführen soll
* Der Computer führt eine Anweisung nach der anderen aus

Programme bestehen nun aus Millionen von Anweisungen. Die Anweisungen sind wiederum Zahlen - hier als Hexadezimal-codierter x86-Code (erstellt mit [godbolt.org](https://godbolt.org/z/WYorj7EG5)):. 

```
55 48 89 e5
89 7d fc 8b
45 fc 0f c0
5d c3\n
```
    
So zu entwickeln ist sehr kompliziert und fehleranfällig, also gibt es ein Abstraktionsniveau höher Assembler - menschenmerkbare Abkürzungen für die Befehle und Hilfe bei der Berechnung von Speicheradressen, wo Daten abgespeichert sind, z.B.:

```
push   rbp
 mov    rbp,rsp
 mov    DWORD PTR [rbp-0x4],edi
 mov    eax,DWORD PTR [rbp-0x4]
 imul   eax,eax
 pop    rbp
 ret    
main:
 push   rbp
 mov    rbp,rsp
 mov    eax,0x0
 pop    rbp
 ret  
```

Auch dies ist noch recht aufwändig - und zudem noch an eine konkrete Prozessorarchitektur gebunden. Als nächstes Abstraktionsniveau kann man dann eine höhere Programmiersprache nehmen, z.B.:

```
int square(int num) {
    return num * num;
}
```

Wir nutzen als Programmiersprache Java. Im Hintergrund gibt es einen Compiler, der Java in Maschinensprache übersetzt. Die Maschinensprache wird auf unseren Wunsch hin vom Betriebssystem geladen und dann zur Ausführung gebracht. Bei Java gibt es noch die Besonderheit, dass es eine Art virtuelle Maschinensprache nutzt, die unabhängig von der genutzten Prozessorarchitektur ist und erst zur Laufzeit von einer weiteren Programmkomponente in die konkrete Maschinensprache übersetzt wird. Aber hierzu am Ende das Kapitels mehr.

**Welcher Code wird ausgeführt?**

Das Betriebssystem startet den binären Code bei der ersten Anweisung - aber wo ist das in unserem Code der höheren Programmiersprache?

Im allgemeinen Java-Programm: die Main-Methode der Hauptklasse: 

```
public static void main(String[] args) {
}
```

**Wo kommen Sie ins Spiel?**

* Computer führen exakt den Code aus, den sie vorgesetzt bekommen
* Compiler übersetzen genau das was im Programmtext steht in Maschinencode
* Programmierer:
    * Analysieren Problemen
    * Überlegen sich Lösungen
    * Übersetzen Lösungen in Programmtext

Der Computer ist nicht kreativ und findet keine Lösungen. Dafür gibt es die glorreiche Tätigkeit des Programmierens.


### Was ist Programmieren?
Unter Programmieren versteht man das Erstellen von Anweisungen für eine Maschine. Dies hat historisch eine viel längere Geschichte, als Sie wahrscheinlich vermuten. Besuchen Sie diese [Seite](https://www.cs101.com/) und überzeugen Sie sich selbst. 

Im Rahmen der nächsten zwei Semester werden Sie nun folgendes Lernen: 

* Programmieren 1: Erwerb der Fähigkeit, ein (mittelgroßes) Java-Programm zu schreiben
* Programmieren 2: Erweiterung um die „Kommunikation mit der Außenwelt“ und Einführung in die Web-Programmierung

Ein Programm ist vergleichbar mit einem Kochrezept:
Ziel ist es einen bzw. mehrere fertige Pfannkuchen aus verschiedenen einzelnen Zutaten zu kochen.
Kochrezepte sind wie „imperative“ Programmierung: (von lat. imperare: anordnen, befehlen)

```
\\ Variablen
gramm mehl        = 300;
liter milch       = 0,6;
stueck eier       = 3;
prise salz        = 1; 
liter wasser      = 0,05;
essloeffel butter = 1;

\\ Methoden
void rühren();
void braten();

\\Hauptprogramm
pfannkuchen_machen {
    teig = mehl + milch + eier + salz;
    rühren(teig);
    teig = teig + wasser;
    rühren(teig);
    pfannkuchen = braten(reig);
}
```

### Java und das erste Programm
Sie werden im 1. Semester also zunächst Java erlernen. 

* Java ist eine weitverbreitete Programmiersprache.
* Java unterstützt viele Programmierparadigmen.
* Java wird ständig weiter entwickelt und um moderne Konzepte ergänzt
* Mit Java stellen wir uns auf „die Schultern eines Riesen“:
    * Hunderte Paket
    * Tausende vordefinierte Klassen


**Das erste Programm**

Der Grundbaustein sind Anweisungen mit verschiedenen Untertypen:

1. Variablen deklarieren: Speicher für Daten reservieren
2. Variablen zuweisen: Werte oder Berechnungen im reservierten Speicher ablegen
3. Methodendeklarationen: eine bestimmte Sammlung von Anweisungen definieren, die unter einem Namen abgerufen werden kann, ggfs. mit Parametern
4. If-Anweisungen: Je nach Wert einer Bedingung, eine von mehreren Anweisungsblöcken ausführen
5. Schleifen: einen Anweisungsblock wiederholt ausführen

Aber nun erst einmal langsam, wir machen das Schritt für Schritt. 

**Aufbau eines Programms**

* Ein Java-Programm ist in (Klassen), Methoden und Blöcke aufgeteilt, die ineinander verschachtelt sind.
* Blöcke werden durch die {}-Klammern geschachtelt.
* Der äußere Block umfasst die Klasse Uebung, der innere Block bildet den Methodenrumpf von `main` mit dem Aufruf der Methode `tue_was`.


TODO: Bild (EF)

Genauer: 

* Hauptklasse oder Startklasse: Oberste Struktureinheit in Java
* Hauptmethode oder main-Methode genannt: Hier läuft das eigentliche Programm ab, ohne die main-Methode läuft das Programm nicht.
* Weitere Methoden: Es können für Teilberechnungen weitere Methoden definiert werden, die dann von der main-Methode aufgerufen werden.
    * Methoden sind gespeicherte Anweisungen innerhalb eines Programms. Sie werden für einen bestimmten Zweck geschrieben und aufgerufen.
    * Methoden kann man auch als Werkzeug betrachten. Man kann ein Werkzeug besitzen, aber es gar nicht einsetzen. 



### Übersetzen und Ausführen eines Programms

* Java-Programme können mit einem beliebigen Editor geschrieben werden. Die Dateiendung der Quell-Dateien lautet .java. Hier steht der Quellcode (engl. Source!)
* Der Java-Compiler javac übersetzt die Quelldatei in sogenannten Bytecode, dieser wird in der mit der Endung .class gespeichert.
* Die Java-Laufzeitumgebung (engl. Runtime Environment) java führt den Bytecode aus.
* Das erste Java-Programm gibt den Text „Hello World“ am Bildschirm aus.


* Übersetzen: In Java wird Programmcode über einen Compiler in den Bytecode übersetzt (kompiliert). Dieser kann dann von einem Interpreter ausgeführt werden.


![Alt text](image.png)

* Eine Besonderheit von Java ist, dass ein Bytecode von verschiedenen Systemen verwendet werden kann: „Write once, run anywhere“

![Alt text](image-1.png)

TODO: weitermachen

### Übungen
1) Recherchieren Sie ein Pfannkuchenrezept und versuchen Sie obige Schritte nachzuvollziehen. Natürlich dürfen Sie dieses Rezept auch nachkochen. 
2) Machen Sie die Aufgaben aus der [Aufgaben-Datenbank](https://speiser.hft-pages.io/programmieraufgaben/2024-ss-pro-1/) aus Kapitel xy.

## Variablen und Datentypen 

Schauen Sie sich folgendes Beispiel an und überlegen Sie sich für jede Zeile, was das Programm tun könnte und welche Ausgabe der Code Ihrer Meinung nach erzeugt.

```java
public class Variablen {
    public static void main(String[] args) {

        byte b = 1;
        System.out.println(b);

        short s = 250;
        System.out.println(s);

        int i = 5;
        System.out.println(i);

        long l = 105464560L;
        System.out.println(l);

        float f = 1.5f;
        System.out.println(f);

        double d = 1.8;
        System.out.println(d);

        char c = 'a';
        System.out.println(c);

        char c2 = 65;
        System.out.println(c2);

        boolean bl = true;
        System.out.println(bl);
    }
}
```
@LIA.java(Variablen)


* Führen Sie nun den Code aus und überprüfen Sie Ihre Vermutung. 

* Ändern Sie den Code ab und probieren Sie aus, ob das Programm noch läuft und was die Ausgabe ist. 

Achtung: Wenn Sie eine rote Ausgabe erhalten, haben Sie einen fehlerhaften Code erzeugt.Können Sie den Code wieder berichtigen?

* Gehen Sie nun auf die nächste Seite und arbeiten Sie die Erklärungen durch.


#### Variablen deklarieren
Der Speicher im Computer besteht nur aus einer langen Folge von 0en und 1en. Jeweils 8 werden zu einem Byte zusammengefasst. Die Bytes werden durchnummeriert (beginnend bei 0). Die Nummer eines Bytes ist dessen Adresse.

Variablen geben einer bestimmten Speicherstelle einen Namen und einen Typen:

* Einfacher zu merken als eine Speicheradresse
* Kann gleich bleiben auch wenn sich die Speicheradresse ändert
* Der Typ kann bestimmte Arten von Programmfehlern verhindern und bestimmt wie viele Bytes die Variable umfasst

Eine Variable ist also eine Art Gefäß im Speicher. Werte können überprüft, verändert und vor allem gespeichert werden.
Variablen haben einen bestimmten TYP, eine ADRESSE im Speicher, einem NAMEN und natürlich einem WERT. Java ist eine statisch typisierte Programmiersprache. Das bedeutet, dass jede Variable einen festen Typ hat, der bereits zur Übersetzungszeit bekannt ist (hierzu später mehr).

Wie funktioniert nun die Deklaration von Variablen in Java:

```
int schuhgroesse;  // Das hier ist übrigens ein Kommentar
char buchstabe1, buchstabe2, buchstabe3; // Hiervon braucht man oft mehrere
double temperatur; // Kommazahl
boolean sonnigerTag; // wahr/falsch, ja/nein -> boolean
```

In Java können wir Variablen direkt bei der Deklaration mit einem Wert initialisieren, hier *Literals* also Konstanten im Programmtext:

```
int schuhgroesse = 42;
double temperatur = 20.2; // Ohne Einheit - müssen wir uns separat merken
double wunschEinkommen = 50_000; // Euro? Brutto/Netto? Im Jahr oder Monat?
boolean sonnigerTag = true;
```

Allgemein also: 

```
Datentyp Variablenname = Wert;
```

Hinweis: Man muss einer Variable nicht sofot einen Wert geben. Dies kann auch später geschehen. Die Variable erhält dann zunächst einen Standardwert - je nach Datentyp. 


Hier finden Sie eine Übersicht über verschiedene primitive Datentypen, das sind die elementaren Datentypen:

| Datentyp   | Bit   | Minimum   | Maximum   |
| :--------- | :--------- | :--------- | :--------- |
| byte    | 8-Bit     | -128    | 127    |
| short    | 16-Bit     | -32768    | 32767    |
| int    | 32-Bit     | -2147483648    | 2147483647   |
| long    | 64-Bit     | -9223372036854775808    | 9223372036854775807    |
| float    | 32-Bit     | -3.4 * (10<sup>38</sup>)    | 3.4 * (10<sup>38</sup>)      |
| double    | 64-Bit     | -1.7 * (10<sup>308</sup>)    | 1.7 * (10<sup>308</sup>)    |

Weiterhin gibt es noch die beiden Datentypen `boolean` und `char`: 

| Datentyp   | Bit   |Werte   |
| :--------- | :--------- | :--------- | 
| boolean    | 1 Byte     | true / false   | 
| char    | 2 Byte     | Ein Unicode-Zeichen  | 

Primitive Typen werden immer klein geschrieben. 

Bei der Benennung von Variablen ist es wichtig, einige Regeln zu beachten:

* Am Anfang muss ein Buchstabe (oder `_`) stehen.
* Danach können Buchstaben oder Ziffern folgen.
* Erlaubt (aber nicht empfohlen) sind: `$, _, ä, ö, ü, ß, €, …` (wobei `$` oft für generierte Namen verwendet wird.)
* Nicht erlaubt sind Sonderzeichen wie `!, ?, *, /, … `
* Groß- und Kleinschreibung ist relevant. Das bedeutet, dass Variablennamen wie `glueckszahl` und `gluecksZahl` unterschiedlich sind.
* Variablennamen sollten zusammengeschrieben werden, also ohne Leerzeichen.
* Eine häufige Konvention ist die Verwendung von „CamelCase“:
  * Variablen, Methoden und Pakete beginnen klein und jedes neue Wort beginnt groß, z.B. kleinAnfangenUndJedesWortGrossBeginnen.
  * Klassennamen beginnen groß und jedes neue Wort beginnt groß, z.B. GrossAnfangenUndJedesWortGrossBeginnen.


#### Variablen zuweisen: Ausdrücke
Die Initialisierung hat den Variablen direkt bei der Speicherreservierung einen Wert zugewiesen. Nachdem eine Variable angelegt wurde können wir ihr einen (neuen) Wert zuweisen:

```
temperatur = 18.7;
```

Das ist eine Zuweisungs-Anweisung. Links vom Gleichheitszeichen steht der Name einer bereits deklarierten Variable. Rechts vom Gleichheitszeichen steht ein Ausdruck.

Für Ausdrücke gibt es verschiedene Aufbauten:

* Literale - das sind konstante Werte, die direkt im Programmtext geschrieben werden, z.B. `8`, `17.4`, `'a'`, `"Hallo Welt"`
* Variablen - der Name einer bestehenden Variable, dieser wird bei der Auswertung des Ausdrucks mit dem aktuellen Wert der Variable ersetzt, z.B. `schuhgroesse`
* Methodenaufrufe - siehe unten. Es wird Code, der unter dem Methodennamen abgespeichert ist ausgeführt und das Ergebnis zurück geliefert, z.B. `readInt()`, manche Methoden nehmen Parameter (wiederum Ausdrücke), z.B. `System.out.println("Hallo Welt")`
* Operationen: hier werden eine oder mehrere (meistens zwei) Ausdrücke mit einem Operator verknüpft, z.B. `schuhgroesse + wunschEinkommen`

In Java müssen wir den Wert eines Ausdrucks einer Variable zuweisen:

```
double komischeZahl = schuhgroesse + wunschEinkommen;
```
oder uns per Methodenaufruf ausgeben:
```
System.out.println("Hallo " + "Programmieren " + 1)
```
Mit Operationen und Methodenaufrufen können komplexe Ausdrücke geschafften werden, z.B.:
```
System.out.println("In Fahrenheit: " + ((readDouble() * 9.0/5.0) + 32))
```
Auch dazu später mehr.

Ausdrücke werden von innen nach außen ausgewertet, d.h. bei verschachtelten Ausdrücken erst die Sachen in Klammern, bzw. nach Prioritäten ("Punkt vor Strich).

Bei Zuweisungen wird erst die rechte Seite berechnet und dann erst die links genannte Variable aktualisiert:

```
int wert = 10;
wert
```

```
wert = wert + 1;
wert
```

#### Operatoren
Übersicht über wichtige Java-Operatoren:

| Operator | Beschreibung                                    |
|----------|-------------------------------------------------|
| +        | Addition von Zahlen oder Verkettung von Strings |
| -        | Subtraktion von Zahlen                          |
| *        | Multiplikation von Zahlen                       |
| /        | Division von Zahlen                             |
| %        | Modulo (Rest bei der Division)                  |
| +=       | Addition und Zuweisung                          |
| -=       | Subtraktion und Zuweisung                       |
| ++       | Inkrement (Erhöhung um eins)                    |
| --       | Dekrement (Verminderung um eins)                |


Von den Standardoperatoren `+`, `-`, `*` (Mal), `/` (geteilt durch) für Zahlen gibt es auch jeweils eine Version, die gleich die Zuweisung integriert, z.B.:

```
int x = 5;
x += 5; // Gleichbedeutend mit x = x + 5
x // Hier wäre x = 10
```

```
int y = 2;
y *= y; // Gleichbedeutend mit y = y * y;
y // Hier wäre y = 4
```
Häufig zählen wir Variablen um eins nach oben oder eins nach unten, hier gibt die Kurzformen `i++` und `i--`. Sie liefern den Wert von `i` zurück und danach wird `i` inkrementiert bzw. dekrementiert:

```
int i = 0;
System.out.println(i++); // Gibt 0 aus und erhöht dann i auf 1
System.out.println(i); // Gibt den neuen Wert von i (1) aus
System.out.println(i--); // Gibt 1 aus und verringert dann i auf 0
System.out.println(i); // Gibt den neuen Wert von i (0) aus
```

Weniger verbreitet sind die Formen `++i` und `--i`, die zuerst `i` inkrementieren bzw. dekrementieren und dann den Wert zurückliefern:

```
int i = 0;
System.out.println(++i); // Erhöht i zuerst auf 1 und gibt dann 1 aus
System.out.println(i); // Gibt den aktuellen Wert von i (1) aus
System.out.println(--i); // Verringert i zuerst auf 0 und gibt dann 0 aus
System.out.println(i); // Gibt den aktuellen Wert von i (0) aus
```

Überraschend nützlich ist der Modulo-Operator `%` - er liefert den Rest bei einer Ganzzahlendivision, z.B.:

```
int zahl = 22;
int divisor = 4;
int rest = zahl % divisor;
rest // Der Wert ist 2, da 22/4 = 5 Rest 2 ist
```

Weitere Operatoren sind Vergleichsoperatoren (`==`, `!=`, `<=`, `>=`, `<`, `>`), Bit-Operatoren (`&`, `|`, `<<`, `>>`) und logische Operatoren (`&&`, `||`)

### Übungen

*  Machen Sie die Aufgaben aus der [Aufgaben-Datenbank](https://speiser.hft-pages.io/programmieraufgaben/2024-ss-pro-1/) aus Kapitel 01.

* TODO: Quiz (EF)

Variablentypen:
* Temparatur 42,2 Grad speichern
* Einzelne Buchstaben speichern
* alle Menschen auf der Welt nummerieren
* Satz speichern


## Arrays

### Arrays: Motivation
Um zu messen wie schnell Sie Java-Code tippen können, sind Sie wie folgt vorgegangen:

- Täglich üben und `wpm` messen
- Wert in einer Variable für diesen Tag eintragen
- Summe über alle Tages-Variablen bilden
- Durchschnitt berechnen

Das ist ziemlich repetetiv:

```java
import java.io.*;

class Demo{
    public static void main(String args[]){
        int wpmMo = 55;
        int wpmDi = 57;
        int wpmMi = 49;
        int wpmDo = 63;
        int wpmFr = 0;
        int wpmSa = 56;
        int wpmSo = 70;

        int sum = 0;
        sum += wpmMo;
        sum += wpmDi;
        sum += wpmMi;
        sum += wpmDo;
        sum += wpmFr;
        sum += wpmSa;
        sum += wpmSo;

        int avg = sum / 7;
        System.out.println(avg);
    }
}
```
@LIA.java(Demo)

Neben der vielen Tipparbeit ist das auch noch:

- Fehleranfällig: einen Tag vergessen, einen Tag doppelt nehmen
- Unflexibel: was ist, wenn wir länger als exakt eine Woche üben?

Für sich wiederholende Berechnungen haben wir bereits die Schleife kennengelernt. Dabei konnten wir z.B. einen Zähler hochzählen:

```java
class Demo{
    public static void main(String args[]){
        int zaehler = 0;
        while(zaehler < 7) {
            System.out.println(zaehler);
            zaehler++;
        }
    }
}
```
@LIA.java(Demo)

Mit Arrays gibt es eine Datenstruktur, wo wir mit Hilfe eines solchen Zählers auf verschiedene Variablen zugreifen können. Statt einzelne Variablen für jeden Tag anzulegen speichern wie die `wpm` in einem Arrays:

```
int[] wpm = {55, 57, 49, 63, 0, 56, 70};
```

Im Speicher wird Platz für 7 direkt hintereinanderliegende int-Werte reserviert und befüllt:

TODO: Die Tabelle sieht doof aus


| Index | 0 | 1 | 2 | 3 | 4 | 5 | 6 |
|-------|---|---|---|---|---|---|---|
| Wert  | 55| 57| 49| 63| 0 | 56| 70|

Mit Hilfe des Index können wir auf die Werte zugreifen:

```
// Der Wert für Montag ist der erste Wert - wir fangen immer bei 0 an zu zählen
wpm[0];
```

Variablen vom Array-Typ haben eine  `.length`-Eigenschaft, die angibt wie viele Werte vorhanden sind:
```wpm.length```

Nun können wir eine Schleife verwenden, um den Mittelwert zu bilden:

```java
class Demo{
    public static void main(String args[]){
        int i = 0;
        int sum = 0;
        int[] wpm = {55, 57, 49, 63, 0, 56, 70};
            while(i < wpm.length) { // < statt <= weil wir bei 0 anfangen zu zählen
                sum += wpm[i];
                i++;
            }
        int avg = sum / wpm.length; // Durch Verwendung von .length statt 7 sind wir flexibel
        System.out.println("Der Durchschnitt ist: " + avg);
    }
}
```
@LIA.java(Demo)

### Mehrdimensionale Arrays

## Kontrollflusss

### If-Verzweigung

### For-Each-Schleife

### Zählschleife ("normale for-Schleife")

### Abschluss und Aufgaben



## Strings
## Klassen, Objekte, Methoden
## Vererbung
## Abstrakte Klassen, Interfaces
## Collections & Maps
## Exceptions
## Generics (optional)
