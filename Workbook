<!--
author: Melanie Baur
language: de
version: 0.0.1
narrator: Deutsch Female
mode: Textbook

comment: Erster Test für Programmieren 1

import: https://raw.githubusercontent.com/liascript/CodeRunner/master/README.md

-->

# Programmieren 1 in Java
<article>
Dieses Buch wird entwickelt an der Hochschule für Technik Stuttgart und dient der Einführung in die Programmierung mit Java in den Studiengängen Informatik und Wirtschaftsinformatik im 1. Semester. Es werden somit keine Vorkenntnisse im Programmieren vorausgesetzt. Das Buch befindet sich gerade im Aufbau und wird laufend ergänzt und verbessert.

Als Arbeitsweise wird für die Teilnehmenden der oben genannten Vorlesungen vorgeschlagen, jede Woche ein Kapitel durchzuarbeiten inkl. der zur Verfügung stehenden Programmieraufgaben. Der geschätze Zeitaufwand beträgt ohne Vorkenntnisse pro Woche 16 Stunden. Hiervon werden 6 Stunden an der Hochschule erbracht, ein:e Professor:in und/oder ein:e Assistent:in stehen hierbei für Fragen zur Verfügung. 10 Stunden sollen selbständig absolviert werden.

</article>
TODO:
Viele Beispiele können direkt im Buch ausgeführt werden. --> Erklärung folgt



## Einführung

Eine Programmiersprache zu lernen, ist unabdingbare Voraussetzung für eine Tätigkeit in der Informatik, z.B. als Entwickler, Projektleiter, Softwarearchitekt. 

* Kennen Sie einen Trainer der Bundesliga, der nicht Profi-Fußballer war? 
* Haben Sie Schwimmen oder Radfahren aus Büchern erlernt? 
* Sind Sie zur praktischen Fahrprüfung erstmals Auto gefahren?
* Wie viele Jahre hat ein Musiker vor dem ersten Klavierkonzert geübt?

### Was ist Programmieren?
Unter Programmieren versteht man das Erstellen von Anweisungen für eine Maschine. 
Im Rahmen der nächsten zwei Semester werden Sie folgendes Lernen: 

* Programmieren 1: Erwerb der Fähigkeit, ein (mittelgroßes) Java-Programm zu schreiben
* Programmieren 2: Erweiterung um die „Kommunikation mit der Außenwelt“ und Einführung in die Web-Programmierung

Ein Programm ist vergleichbar mit einem Kochrezept:
Ziel ist es einen bzw. mehrere fertige Pfannkuchen aus verschiedenen einzelnen Zutaten zu kochen.
Kochrezepte sind wie „imperative“ Programmierung: (von lat. imperare: anordnen, befehlen)

```
\\ Variablen
gramm mehl        = 300;
liter milch       = 0,6;
stueck eier       = 3;
prise salz        = 1; 
liter wasser      = 0,05;
essloeffel butter = 1;

\\ Methoden
void rühren();
void braten();

\\Hauptprogramm
pfannkuchen_machen {
    teig = mehl + milch + eier + salz;
    rühren(teig);
    teig = teig + wasser;
    rühren(teig);
    pfannkuchen = braten(reig);
}
```

### Aufgabe
Recherchieren Sie ein Pfannkuchenrezept und versuchen Sie obige Schritte nachzuvollziehen. Natürlich dürfen Sie dieses Rezept auch nachkochen. 




### Was ist eigentlich Code?

Diese vorhergehenden Erklärungen waren für die meisten wahrscheinlich noch nicht total einleuchtend. Bei komplexen Themen wie Programmieren haben wir oft ein Henne-Ei-Problem bei der Einführung. Es wird sich lichten.

Mit Inspiration von [Stanford CS101](https://web.stanford.edu/class/cs101/)

-> hier fehlt noch Text


## Arrays

### Arrays: Motivation
Um zu messen wie schnell Sie Java-Code tippen können, sind Sie wie folgt vorgegangen:

- Täglich üben und `wpm` messen
- Wert in einer Variable für diesen Tag eintragen
- Summe über alle Tages-Variablen bilden
- Durchschnitt berechnen

Das ist ziemlich repetetiv:

```java
import java.io.*;

class Demo{
    public static void main(String args[]){
        int wpmMo = 55;
        int wpmDi = 57;
        int wpmMi = 49;
        int wpmDo = 63;
        int wpmFr = 0;
        int wpmSa = 56;
        int wpmSo = 70;

        int sum = 0;
        sum += wpmMo;
        sum += wpmDi;
        sum += wpmMi;
        sum += wpmDo;
        sum += wpmFr;
        sum += wpmSa;
        sum += wpmSo;

        int avg = sum / 7;
        System.out.println(avg);
    }
}
```
@LIA.java(Demo)

Neben der vielen Tipparbeit ist das auch noch:

- Fehleranfällig: einen Tag vergessen, einen Tag doppelt nehmen
- Unflexibel: was ist, wenn wir länger als exakt eine Woche üben?

Für sich wiederholende Berechnungen haben wir bereits die Schleife kennengelernt. Dabei konnten wir z.B. einen Zähler hochzählen:

```java
import java.io.*;

class Demo{
    public static void main(String args[]){
        int zaehler = 0;
        while(zaehler < 7) {
            System.out.println(zaehler);
            zaehler++;
        }
    }
}
```
@LIA.java(Demo)

Mit Arrays gibt es eine Datenstruktur, wo wir mit Hilfe eines solchen Zählers auf verschiedene Variablen zugreifen können. Statt einzelne Variablen für jeden Tag anzulegen speichern wie die `wpm` in einem Arrays:

```
int[] wpm = {55, 57, 49, 63, 0, 56, 70};
```

Im Speicher wird Platz für 7 direkt hintereinanderliegende int-Werte reserviert und befüllt:

TODO: Die Tabelle sieht doof aus


| Index | 0 | 1 | 2 | 3 | 4 | 5 | 6 |
|-------|---|---|---|---|---|---|---|
| Wert  | 55| 57| 49| 63| 0 | 56| 70|

Mit Hilfe des Index können wir auf die Werte zugreifen:

```
// Der Wert für Montag ist der erste Wert - wir fangen immer bei 0 an zu zählen
wpm[0];
```

Variablen vom Array-Typ haben eine  `.length`-Eigenschaft, die angibt wie viele Werte vorhanden sind:
```wpm.length```

Nun können wir eine Schleife verwenden, um den Mittelwert zu bilden:

```java
import java.io.*;

class Demo{
    public static void main(String args[]){
        int i = 0;
        int sum = 0;
        int[] wpm = {55, 57, 49, 63, 0, 56, 70};
            while(i < wpm.length) { // < statt <= weil wir bei 0 anfangen zu zählen
                sum += wpm[i];
                i++;
            }
        int avg = sum / wpm.length; // Durch Verwendung von .length statt 7 sind wir flexibel
        System.out.println("Der Durchschnitt ist: " + avg);
    }
}
```
@LIA.java(Demo)


### Array Basics

### For-Each-Schleife

### Zählschleife ("normale for-Schleife")

### Mehrdimensionale Arrays

### Abschluss und Aufgaben

## Kapitel 2
## Kapitel 3
## Kapitel 4
